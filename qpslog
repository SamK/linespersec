#!/bin/bash
# lnps display the lines written per second in a file
#
# In other words: it shows the difference of line count since its last execution.
#
# Usage: lnps <logfile>
#

usage="Usage: `basename $0` <file>"
targetFile="$1"

# Create a sanitized datafile: "/" becomes ":"
dataFile="${targetFile//\//:}"
dataFile="/tmp/lnps_${dataFile}"

# Test for argument
if [  ! -n "$targetFile" ]
then
 echo -e $usage
 exit 1
fi

# Test for targetFile existence
if [ ! -e "$targetFile" ]
then
 echo "$targetFile does not exist."
 echo 
 echo -e $usage
 exit 2
fi

# this function counts lines
lines(){
    wc -l "$1" | sed 's/\([0-9]*\).*/\1/'
}

# find current date and value
currTime=$( date +%s )
currValue=$( lines "$targetFile" )

if [ -f $dataFile ]; then
    # get previous date and value
    lastMtime=$( stat -c %Y "$dataFile" )
    lastValue=$( cat "$dataFile" )
else
    # if first run, save and quit
    echo $currValue > $dataFile
    echo First run
    exit 0
fi

# calculate
seconds=$(( $currTime - $lastMtime ))
requests=$(( $currValue - $lastValue ))

# if the file has is smaller (ex: a rotated log file), then then number of returned queries is below zero
# the only available value is the current value. Not accurate but better than nothing
if [ $requests -lt 0 ]; then
    requests=$currValue
fi

# write results
echo $currValue > $dataFile

# output result
result=$( echo "scale=3; $requests / $seconds" | bc -l )

# bc -l does not display zero before the decimal if result < 1.
# I think it's better with the zero
echo ${result/#\./0.}

exit 0

